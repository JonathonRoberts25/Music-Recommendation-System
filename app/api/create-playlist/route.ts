import { NextResponse } from 'next/server';
import { getServerSession } from 'next-auth/next';
import { authOptions } from '../auth/[...nextauth]/route';
import SpotifyWebApi from 'spotify-web-api-node';

export async function POST(request: Request) {
  const session: any = await getServerSession(authOptions);

  if (!session || !session.accessToken) {
    return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
  }

  const { playlistName, trackUris } = await request.json();

  if (!playlistName || !trackUris || !Array.isArray(trackUris)) {
    return NextResponse.json({ error: 'Playlist name and track URIs are required' }, { status: 400 });
  }

  const spotifyApi = new SpotifyWebApi({
    clientId: process.env.SPOTIFY_CLIENT_ID,
    clientSecret: process.env.SPOTIFY_CLIENT_SECRET,
    accessToken: session.accessToken,
  });

  try {
    // 1. Create a new private playlist for the user
    const createPlaylistResponse = await spotifyApi.createPlaylist(playlistName, {
      'description': `A playlist for a ${playlistName} mood, generated by Mood Music.`,
      'public': false
    });

    const newPlaylist = createPlaylistResponse.body;
    console.log('Created playlist:', newPlaylist.name);

    // 2. Add the recommended tracks to the new playlist
    await spotifyApi.addTracksToPlaylist(newPlaylist.id, trackUris);
    console.log(`Added ${trackUris.length} tracks to the playlist.`);

    // 3. Return the URL of the new playlist to embed it on the frontend
    return NextResponse.json({ playlistUrl: newPlaylist.external_urls.spotify });

  } catch (error: any) {
    console.error('Error creating playlist:', error.message);
    return NextResponse.json({ error: 'Failed to create playlist on Spotify.' }, { status: 500 });
  }
}